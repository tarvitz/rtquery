expression ::= statement_group ((<low-level-op>) statement_group)*;
statement_group ::= statement | <lparen> statement <rparen>;
statement ::= (literal | string_literal) <high-level-op> composite;
composite ::= (literal | number | string_literal);

// operations
high-level-op ::= <greater-than> | <lesser-than> | <is> | <is-not> | <matches>
                  | <matches-not>;
low-level-op ::= <and> | <or>;

// literals
string_literal ::= "'" literal "'" | '"' literal '"';
literal ::= <letter>(<character>)*;
number ::= digit | <minus> digit;

// entities
<character> ::= <letter> | <symbol> | <digit>;
<digit> ::= "0" | "1" | "2" | "3" | "4" | "5" | "6" |
            "7" | "8" | "9" ;
<letter> ::= "A" | "B" | "C" | "D" | "E" | "F" | "G"
       | "H" | "I" | "J" | "K" | "L" | "M" | "N"
       | "O" | "P" | "Q" | "R" | "S" | "T" | "U"
       | "V" | "W" | "X" | "Y" | "Z" | "a" | "b"
       | "c" | "d" | "e" | "f" | "g" | "h" | "i"
       | "j" | "k" | "l" | "m" | "n" | "o" | "p"
       | "q" | "r" | "s" | "t" | "u" | "v" | "w"
       | "x" | "y" | "z" ;
<symbol> ::= "-" | "_";

// group symbols
<lparen> ::= "(";
<rparen> ::= ")";

// operations
<greater-than> ::= ">";
<lesser-than> ::= "<";
<is> ::= "=";
<is-not> ::= "!=";
<matches> ::= "~";
<matches-not> ::= "!~";

// unary operations
<minus> ::= "-";

// logical binary operations
<and> ::= "AND";
<or> ::= "OR";